#!/usr/bin/env bpftrace
/*
 * udp_send_queue.bt   Trace UDP kernel socket send queue.
 *              For Linux, uses bpftrace and eBPF.
 *
 * USAGE: udp_send_queue.bt
 *
 * This is a bpftrace version of the bcc tool of the same name.
 * It is limited to ipv4 addresses, and cannot show tcp flags.
 *
 * 19-Dec-2021 Kai Liu -- created this.
 */

#include <linux/socket.h>
#include <net/sock.h>
#include <linux/ip.h>

BEGIN
{
  printf("Tracing UDP send queue. Hit Ctrl-C to end.\n");
  printf("===============checking port 5001 by default ==============\n");
  printf("%-8s %-8s %-16s %-21s %-21s %-8s\n", "TIME", "PID", "COMM", "SADDR:SPORT", "DADDR:DPORT", "STATE");

  // See https://github.com/torvalds/linux/blob/master/include/net/tcp_states.h
  @tcp_states[1] = "ESTABLISHED";
  @tcp_states[2] = "SYN_SENT";
  @tcp_states[3] = "SYN_RECV";
  @tcp_states[4] = "FIN_WAIT1";
  @tcp_states[5] = "FIN_WAIT2";
  @tcp_states[6] = "TIME_WAIT";
  @tcp_states[7] = "CLOSE";
  @tcp_states[8] = "CLOSE_WAIT";
  @tcp_states[9] = "LAST_ACK";
  @tcp_states[10] = "LISTEN";
  @tcp_states[11] = "CLOSING";
  @tcp_states[12] = "NEW_SYN_RECV";
}

kprobe:sock_wfree
{
    //$skb = ((void *) arg0);
    $skb = ((struct sk_buff *) arg0);
    $len = kptr(arg0 );
    $s = (uint32)(*($len + 224));
    printf("truesize %d %d\n", $skb->truesize, $s);
    printf("data_len %d\n", $skb->data_len);
    /*
    $skb = ((struct sk_buff *) arg0);
    $sk = ((struct sock *)$skb->sk);
    $inet_family = $sk->__sk_common.skc_family;
    if ($inet_family == AF_INET || $inet_family == AF_INET6) {
	$dport = $sk->__sk_common.skc_dport;
	$dport = ($dport >> 8) | (($dport << 8) & 0x00FF00);
	if ($dport == 5002) {
		//$count = $sk->sk_wmem_alloc.refs.counter;
		//printf("f %ld %x %-10d\n", nsecs, $skb, $count);
		$start = @start[$skb];
		printf("cost %ld us\n", (nsecs - $start) / 1000);
		delete(@start[$skb]);
	}
    }
    */
}

/* This will be called by tx path */
kprobe:skb_set_owner_w
{
    $skb = ((struct sk_buff *) arg0);
    $sk = ((struct sock *) arg1);
    $inet_family = $sk->__sk_common.skc_family;
    if ($inet_family == AF_INET || $inet_family == AF_INET6) {
	$dport = $sk->__sk_common.skc_dport;
	$dport = ($dport >> 8) | (($dport << 8) & 0x00FF00);
	if ($dport == 5002) {
		$count = $sk->sk_wmem_alloc.refs.counter;
		//$iph = (struct iphdr *)($skb->head + $skb->network_header);
		//printf("a1 %ld %x %d %-10d id %d\n", nsecs, $skb, $count, $iph->id);
		@start[$skb] = nsecs;

	}
    }
}

kprobe:sock_alloc_send_pskb
{
  $sk = ((struct sock *) arg0);
  $inet_family = $sk->__sk_common.skc_family;

  if ($inet_family == AF_INET || $inet_family == AF_INET6) {
    $dport = $sk->__sk_common.skc_dport;
    $dport = ($dport >> 8) | (($dport << 8) & 0x00FF00);

    // check port 5001 by default
    if ($dport == 5002) {
           if ($inet_family == AF_INET) {
                $daddr = ntop($sk->__sk_common.skc_daddr);
                $saddr = ntop($sk->__sk_common.skc_rcv_saddr);
            } else {
                $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
                $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
            }
            $lport = $sk->__sk_common.skc_num;
            $dport = $sk->__sk_common.skc_dport;

            // Destination port is big endian, it must be flipped
            $dport = ($dport >> 8) | (($dport << 8) & 0x00FF00);

            $state = $sk->__sk_common.skc_state;
            $statestr = @tcp_states[$state];

            $count = $sk->sk_wmem_alloc.refs.counter;
            $sk_sndbuf = $sk->sk_sndbuf;
	    //time("====%H:%M:%S ");
	    printf("%ld %-10d %d\n", nsecs / 1000000, $count, $sk_sndbuf);
            // to avoid log flushing, set threshold to 102992
            if ($count > 102992 * 100000) {
                    time("====%H:%M:%S ");
                    printf("%-8d %-16s %-10d", pid, comm, $count);
                    printf("%39s:%-6d %39s:%-6d %-10s\n", $saddr, $lport, $daddr, $dport, $statestr);
                    //printf("%s\n", kstack);
            }
        }
    }
}

END
{
  clear(@tcp_states);
}
